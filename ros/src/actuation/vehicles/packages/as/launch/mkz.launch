<!-- -->
<launch>

  <!-- launch configrations -->
  <arg name="use_vlp16_front" default="true" />
  <arg name="use_vlp16_rear" default="true" />
  <arg name="use_hdl64_top" default="true" />
  <arg name="use_points_concat" default="true" />
  <arg name="use_pointgrey" default="true" />
  
  <!-- velodyne arguments -->
  <arg name="vlp16_calibration"
       default="$(find velodyne_pointcloud)/params/VLP16db.yaml" />
  <arg name="hdl64_calibration"
       default="$(find velodyne_pointcloud)/params/64e_s2.1-sztaki.yaml" />

  <arg name="vlp16_front_frame_id" default="vlp16_front" />
  <arg name="vlp16_front_device_ip" default="192.168.30.14" />
  <arg name="vlp16_front_port" default="2369" />
  <arg name="vlp16_front_manager" default="$(arg vlp16_front_frame_id)_nodelet_manager" />

  <arg name="vlp16_rear_frame_id" default="vlp16_rear" />
  <arg name="vlp16_rear_device_ip" default="192.168.40.201" />
  <arg name="vlp16_rear_port" default="2370" />
  <arg name="vlp16_rear_manager" default="$(arg vlp16_rear_frame_id)_nodelet_manager" />

  <arg name="hdl64_top_frame_id" default="hdl64_top" />
  <arg name="hdl64_top_device_ip" default="192.168.20.13" />
  <arg name="hdl64_top_port" default="2368" />
  <arg name="hdl64_top_manager" default="$(arg hdl64_top_frame_id)_nodelet_manager" />

  <arg name="velodyne_topic" default="points_raw" />
  <arg name="velodyne_frame_id" default="velodyne" />

  <!-- transforms -->
  <!-- NOTE: manually fixed these parameters by seeing points -->
  <arg name="base_frame_id" default="base_link" />
  <arg name="base_to_velodyne_x" value="0.12" />
  <arg name="base_to_velodyne_y" value="0.0" />
  <arg name="base_to_velodyne_z" value="1.45" />
  <arg name="base_to_velodyne_yaw" value="0.0" />
  <arg name="base_to_velodyne_pitch" value="0.0" />
  <arg name="base_to_velodyne_roll" value="0.0" />

  <param name="tf_x" type="double" value="$(arg base_to_velodyne_x)" />
  <param name="tf_y" type="double" value="$(arg base_to_velodyne_y)" />
  <param name="tf_z" type="double" value="$(arg base_to_velodyne_z)" />
  <param name="tf_yaw" type="double" value="$(arg base_to_velodyne_yaw)" />
  <param name="tf_pitch" type="double" value="$(arg base_to_velodyne_pitch)" />
  <param name="tf_roll" type="double" value="$(arg base_to_velodyne_roll)" />

  <node pkg="tf" type="static_transform_publisher"
        name="$(arg base_frame_id)_to_$(arg velodyne_frame_id)"
        args="$(arg base_to_velodyne_x) $(arg base_to_velodyne_y) $(arg base_to_velodyne_z)
              $(arg base_to_velodyne_yaw) $(arg base_to_velodyne_pitch) $(arg base_to_velodyne_roll)
              $(arg base_frame_id) $(arg velodyne_frame_id) 100" />
  <node pkg="tf" type="static_transform_publisher"
        name="$(arg velodyne_frame_id)_to_$(arg vlp16_front_frame_id)"
        args="1.16 0 0.14 0.15 0.14 0 $(arg velodyne_frame_id) $(arg vlp16_front_frame_id) 100" />
  <node pkg="tf" type="static_transform_publisher"
        name="$(arg velodyne_frame_id)_to_$(arg vlp16_rear_frame_id)"
        args="0 0 0 2.8 -0.09 0 $(arg velodyne_frame_id) $(arg vlp16_rear_frame_id) 100" />
  <node pkg="tf" type="static_transform_publisher"
        name="$(arg velodyne_frame_id)_to_$(arg hdl64_top_frame_id)"
        args="0.93 0 0.09 0 0 0 $(arg velodyne_frame_id) $(arg hdl64_top_frame_id) 100" />

  <!-- velodyne front -->
  <group if="$(arg use_vlp16_front)">
    <group ns="$(arg vlp16_front_frame_id)">
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_front_manager)" args="manager" />
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_front_manager)_driver"
            args="load velodyne_driver/DriverNodelet $(arg vlp16_front_manager)" >
        <param name="device_ip" value="$(arg vlp16_front_device_ip)" />
        <param name="frame_id" value="$(arg vlp16_front_frame_id)" />
        <param name="model" value="VLP16" />
        <param name="pcap" value="" />
        <param name="port" value="$(arg vlp16_front_port)" />
        <param name="read_fast" value="false" />
        <param name="read_once" value="false" />
        <param name="repeat_delay" value="0.0" />
        <param name="rpm" value="600.0" />
      </node>
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_front_manager)_cloud"
            args="load velodyne_pointcloud/CloudNodelet $(arg vlp16_front_manager)">
        <param name="calibration" value="$(arg vlp16_calibration)" />
        <param name="max_range" value="130.0" />
        <param name="min_range" value="3.0" />
      </node>
    </group>
  </group>

  <!-- velodyne rear -->
  <group if="$(arg use_vlp16_rear)">
    <group ns="$(arg vlp16_rear_frame_id)">
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_rear_manager)" args="manager" />
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_rear_manager)_driver"
            args="load velodyne_driver/DriverNodelet $(arg vlp16_rear_manager)" >
        <param name="device_ip" value="$(arg vlp16_rear_device_ip)" />
        <param name="frame_id" value="$(arg vlp16_rear_frame_id)" />
        <param name="model" value="VLP16" />
        <param name="pcap" value="" />
        <param name="port" value="$(arg vlp16_rear_port)" />
        <param name="read_fast" value="false" />
        <param name="read_once" value="false" />
        <param name="repeat_delay" value="0.0" />
        <param name="rpm" value="600.0" />
      </node>
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_rear_manager)_cloud"
            args="load velodyne_pointcloud/CloudNodelet $(arg vlp16_rear_manager)">
        <param name="calibration" value="$(arg vlp16_calibration)" />
        <param name="max_range" value="130.0" />
        <param name="min_range" value="3.0" />
      </node>
    </group>
  </group>

  <!-- velodyne top -->
  <group if="$(arg use_hdl64_top)">
    <group ns="$(arg hdl64_top_frame_id)">
      <node pkg="nodelet" type="nodelet" name="$(arg hdl64_top_manager)" args="manager" />
      <node pkg="nodelet" type="nodelet" name="$(arg hdl64_top_manager)_driver"
            args="load velodyne_driver/DriverNodelet $(arg hdl64_top_manager)" >
        <param name="device_ip" value="$(arg hdl64_top_device_ip)" />
        <param name="frame_id" value="$(arg hdl64_top_frame_id)" />
        <param name="model" value="64E_S3" />
        <param name="pcap" value="" />
        <param name="port" value="$(arg hdl64_top_port)" />
        <param name="read_fast" value="false" />
        <param name="read_once" value="false" />
        <param name="repeat_delay" value="0.0" />
        <param name="rpm" value="600.0" />
      </node>
      <node pkg="nodelet" type="nodelet" name="$(arg hdl64_top_manager)_cloud"
            args="load velodyne_pointcloud/CloudNodelet $(arg hdl64_top_manager)">
        <param name="calibration" value="$(arg hdl64_calibration)" />
        <param name="max_range" value="200.0" />
        <param name="min_range" value="3.0" />
      </node>
    </group>
  </group>

  <!-- points concat filter -->
  <group if="$(arg use_points_concat)">
    <include file="$(find points_preprocessor)/launch/points_concat_filter.launch">
      <arg name="input_topics" value="[
           $(arg vlp16_front_frame_id)/velodyne_points,
           $(arg vlp16_rear_frame_id)/velodyne_points,
           $(arg hdl64_top_frame_id)/velodyne_points ]" />
      <arg name="output_topic" value="$(arg velodyne_topic)" />
      <arg name="output_frame_id" value="$(arg velodyne_frame_id)" />
    </include>
  </group> 

  <!-- pointgrey driver --> 
  <group if="$(arg use_pointgrey)">
    <!--
    <include file="$(find autoware_pointgrey_drivers)/scripts/grasshopper3.launch">
      <arg name="fps" value="20"/>
    </include>
    -->
    <group ns="camera0">
      <node pkg="pointgrey_camera_driver" name="pointgrey_node" type="camera_node">
        <param name="auto_packet_size" value="false" />
        <param name="size" value="1500" />
        <param name="serial" value="16452918" />
        <remap from="camera_info" to="camera_info_none" />
      </node>
      <node pkg="points2image" type="points2image" name="points2image" />
    </group>
    <group ns="camera1">
      <node pkg="pointgrey_camera_driver" name="pointgrey_node" type="camera_node">
        <param name="auto_packet_size" value="false" />
        <param name="size" value="1500" />
        <param name="serial" value="16452919" />
        <remap from="camera_info" to="camera_info_none" />
      </node>
      <node pkg="points2image" type="points2image" name="points2image" />
    </group>
  </group>

</launch>
