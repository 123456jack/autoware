<!-- -->
<launch>

  <!-- launch configrations -->
  <arg name="use_vlp16_front" default="true" />
  <arg name="use_vlp16_rear" default="true" />
  <arg name="use_points_concat" default="true" />
  <arg name="use_pointgrey" default="true" />
  <arg name="use_pacmod" default="false" />
  <arg name="use_llc" default="false" />
  <arg name="use_as_interface" default="false" />
  <arg name="use_socketcan" default="false" />

  <!-- velodyne arguments -->
   <arg name="vlp16_calibration"
       default="$(find velodyne_pointcloud)/params/VLP16db.yaml" />
   <arg name="vlp16_hires_calibration"
       default="$(find velodyne_pointcloud)/params/VLP16_hires_db.yaml" />

  <arg name="vlp16_front_frame_id" default="vlp16_front" />
  <arg name="vlp16_front_device_ip" default="" />
  <arg name="vlp16_front_port" default="2368" />
  <arg name="vlp16_front_manager" default="$(arg vlp16_front_frame_id)_nodelet_manager" />

  <arg name="vlp16_rear_frame_id" default="vlp16_rear" />
  <arg name="vlp16_rear_device_ip" default="" />
  <arg name="vlp16_rear_port" default="2369" />
  <arg name="vlp16_rear_manager" default="$(arg vlp16_rear_frame_id)_nodelet_manager" />

  <arg name="velodyne_topic" default="points_raw" />
  <arg name="velodyne_frame_id" default="velodyne" />

  <!-- transforms -->
  <!-- NOTE: manually fixed these parameters by seeing points -->
  <arg name="base_frame_id" default="base_link" />
  <arg name="base_to_velodyne_x" value="0.18" />
  <arg name="base_to_velodyne_y" value="0.02" />
  <arg name="base_to_velodyne_z" value="1.41" />
  <arg name="base_to_velodyne_yaw" value="0.0" />
  <arg name="base_to_velodyne_pitch" value="0.0" />
  <arg name="base_to_velodyne_roll" value="0.0" />

  <param name="tf_x" type="double" value="$(arg base_to_velodyne_x)" />
  <param name="tf_y" type="double" value="$(arg base_to_velodyne_y)" />
  <param name="tf_z" type="double" value="$(arg base_to_velodyne_z)" />
  <param name="tf_yaw" type="double" value="$(arg base_to_velodyne_yaw)" />
  <param name="tf_pitch" type="double" value="$(arg base_to_velodyne_pitch)" />
  <param name="tf_roll" type="double" value="$(arg base_to_velodyne_roll)" />

  <node pkg="tf" type="static_transform_publisher"
        name="$(arg base_frame_id)_to_$(arg velodyne_frame_id)"
        args="$(arg base_to_velodyne_x) $(arg base_to_velodyne_y) $(arg base_to_velodyne_z)
              $(arg base_to_velodyne_yaw) $(arg base_to_velodyne_pitch) $(arg base_to_velodyne_roll)
              $(arg base_frame_id) $(arg velodyne_frame_id) 100" />
  <node pkg="tf" type="static_transform_publisher"
        name="$(arg velodyne_frame_id)_to_$(arg vlp16_front_frame_id)"
        args="1.23 0 0 -0.095 0.14 0 $(arg velodyne_frame_id) $(arg vlp16_front_frame_id) 100" />
  <node pkg="tf" type="static_transform_publisher"
        name="$(arg velodyne_frame_id)_to_$(arg vlp16_rear_frame_id)"
        args="0 0 0 3.16 0.19 0 $(arg velodyne_frame_id) $(arg vlp16_rear_frame_id) 100" />

  <!-- velodyne front -->
  <group if="$(arg use_vlp16_front)">
    <group ns="$(arg vlp16_front_frame_id)">
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_front_manager)" args="manager" />
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_front_manager)_driver"
            args="load velodyne_driver/DriverNodelet $(arg vlp16_front_manager)" >
        <param name="device_ip" value="$(arg vlp16_front_device_ip)" />
        <param name="frame_id" value="$(arg vlp16_front_frame_id)" />
        <param name="model" value="VLP16" />
        <param name="pcap" value="" />
        <param name="port" value="$(arg vlp16_front_port)" />
        <param name="read_fast" value="false" />
        <param name="read_once" value="false" />
        <param name="repeat_delay" value="0.0" />
        <param name="rpm" value="600.0" />
      </node>
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_front_manager)_cloud"
            args="load velodyne_pointcloud/CloudNodelet $(arg vlp16_front_manager)">
        <param name="calibration" value="$(arg vlp16_hires_calibration)" />
        <param name="max_range" value="130.0" />
        <param name="min_range" value="0.0" />
      </node>
    </group>
  </group>

  <!-- velodyne rear -->
  <group if="$(arg use_vlp16_rear)">
    <group ns="$(arg vlp16_rear_frame_id)">
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_rear_manager)" args="manager" />
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_rear_manager)_driver"
            args="load velodyne_driver/DriverNodelet $(arg vlp16_rear_manager)" >
        <param name="device_ip" value="$(arg vlp16_rear_device_ip)" />
        <param name="frame_id" value="$(arg vlp16_rear_frame_id)" />
        <param name="model" value="VLP16" />
        <param name="pcap" value="" />
        <param name="port" value="$(arg vlp16_rear_port)" />
        <param name="read_fast" value="false" />
        <param name="read_once" value="false" />
        <param name="repeat_delay" value="0.0" />
        <param name="rpm" value="600.0" />
      </node>
      <node pkg="nodelet" type="nodelet" name="$(arg vlp16_rear_manager)_cloud"
            args="load velodyne_pointcloud/CloudNodelet $(arg vlp16_rear_manager)">
        <param name="calibration" value="$(arg vlp16_calibration)" />
        <param name="max_range" value="130.0" />
        <param name="min_range" value="0.0" />
      </node>
    </group>
  </group>

  <!-- points concat filter -->
  <group if="$(arg use_points_concat)">
    <include file="$(find points_preprocessor)/launch/points_concat_filter.launch">
      <arg name="input_topics" value="[
           $(arg vlp16_front_frame_id)/velodyne_points,
           $(arg vlp16_rear_frame_id)/velodyne_points ]" />
      <arg name="output_topic" value="$(arg velodyne_topic)" />
      <arg name="output_frame_id" value="$(arg velodyne_frame_id)" />
    </include>
  </group>

  <!-- pointgrey driver -->
  <group if="$(arg use_pointgrey)">
    <include file="$(find autoware_pointgrey_drivers)/scripts/grasshopper3.launch">
      <arg name="fps" value="20"/>
    </include>
  </group>

  <!-- autonomoustuff pacmod -->
  <group ns="pacmod" if="$(arg use_pacmod)">
    <include file="$(find pacmod)/launch/pacmod.launch">
      <arg name="pacmod_vehicle_type" value="$(arg pacmod_vehicle_type)" />
      <arg name="use_kvaser" value="true" unless="$(arg use_socketcan)" />
      <arg name="kvaser_hardware_id" value="$(arg pacmod_hardware_id)" unless="$(arg use_socketcan)" />
      <arg name="kvaser_circuit_id" value="$(arg pacmod_circuit_id)" unless="$(arg use_socketcan)" />
      <arg name="use_socketcan" value="true" if="$(arg use_socketcan)" />
      <arg name="socketcan_device" value="$(arg pacmod_socketcan_device)" if="$(arg use_socketcan)" />
    </include>
  </group>

  <!-- autonomoustuff llc -->
  <group if="$(arg use_llc)">
    <include file="$(find joystick_vehicle_test)/launch/vehicle_controller_joystick_test.launch"/>
  </group>

  <!-- autoware pacmod interface -->
  <group if="$(arg use_as_interface)">
    <include file="$(find as)/launch/as_interface.launch">
      <arg name="use_timer_publisher" value="$(arg use_timer_publisher)" />
    </include>
  </group>

</launch>
