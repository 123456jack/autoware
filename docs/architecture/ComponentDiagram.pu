@startuml

title Autoware Component Dependencies (v2.0)

() "sensor_msgs::Image\n/image_raw" as image_raw
() "sensor_msgs::PointCloud2\n/points_raw" as points_raw
() "sensor_msgs::PointCloud2\n/filtered_points" as filtered_points
() "sensor_msgs::Imu\n/imu_raw" as imu_raw 
() "nmea_msgs::Sentence\n/nmea_sentence" as nmea_sentence

folder sensing {
    [camera]
    'outputs
    camera --> image_raw

    [lidar]
    'outputs
    lidar --> points_raw

    [filters]
    'inputs
    points_raw --> filters
    'outputs
    filters --> filtered_points

    [imu]
    'outputs
    imu --> imu_raw

    [gnss]
    'outputs
    gnss --> nmea_sentence
}

() "autoware_detection_msgs::ObjectArray\n/detection/objects_tracked" as objects_tracked
'() "autoware_detection_msgs::TrafficLight\n/detection/traffic_light_color" as traffic_light_color

folder detection {
    () "autoware_detection_msgs::ObjectArray\n/detection/image/objects" as detected_objects_vision
    () "autoware_detection_msgs::ObjectArray\n/detection/image/objects_tracked" as image_objects_tracked
    () "or" as image_objects
    () "autoware_detection_msgs::ObjectArray\n/detection/lidar/objects" as detected_objects_lidar
    () "autoware_detection_msgs::ObjectArray\n/detection/objects_postfused" as detected_objects_combined
    () "autoware_detection_msgs::ObjectArray\n/detection/objects_prefused" as detected_objects_fused
    () "autoware_detection_msgs::ObjectArray\n/detection/objects_fused" as objects_fused

    [image_detector]
    'inputs
    image_raw --> image_detector
    'outputs
    image_detector --> detected_objects_vision

    [image_tracker]
    'inputs
    detected_objects_vision --> image_tracker
    'outputs
    image_tracker --> image_objects_tracked

    [lidar_detector]
    'inputs
    points_raw --> lidar_detector
    'outputs
    lidar_detector --> detected_objects_lidar

    [fusion_detector]
    'inputs
    image_raw --> fusion_detector
    points_raw --> fusion_detector
    'outputs
    fusion_detector --> detected_objects_fused

    [range_vision_fusion\n(in fusion_tools)] as fusion_tools
    'inputs
    image_objects --> fusion_tools
    detected_objects_lidar --> fusion_tools
    'outputs
    fusion_tools --> detected_objects_combined

    'connection
    detected_objects_vision --> image_objects
    image_objects_tracked --> image_objects

    detected_objects_lidar --> objects_fused
    detected_objects_combined --> objects_fused
    detected_objects_fused --> objects_fused

    [object_tracker]
    'inputs
    objects_fused --> object_tracker
    'outputs
    object_tracker --> objects_tracked

    '[trafficlight_recognizer]
    'inputs
    'image_raw --> trafficlight_recognizer
    'outputs
    'trafficlight_recognizer --> traffic_light_color
}

'lidar_localizer
() "sensor_msgs::PointCloud2\n/points_map" as points_map

'vel_pose_connect
() "geometry_msgs::PoseStamped\n/localization/current_pose" as current_pose
() "geometry_msgs::TwistStamped\n/localization/current_velocity" as current_velocity

folder localization {
    () "geometry_msgs::PoseStamped\n/localization/gnss_pose" as gnss_pose
    () "geometry_msgs::TwistStamped\n/localization/estimate_twist" as estimate_twist
    () "geometry_msgs::PoseStamped\n/localization/ndt_pose" as ndt_pose

    [gnss_localizer]
    'inputs
    nmea_sentence --> gnss_localizer
    'outputs
    gnss_localizer --> gnss_pose

    [lidar_localizer]
    'inputs
    gnss_pose --> lidar_localizer
    filtered_points --> lidar_localizer
    points_map --> lidar_localizer
    imu_raw --> lidar_localizer
    'outputs
    lidar_localizer --> estimate_twist
    lidar_localizer --> ndt_pose

    [autoware_connector\n(vel_pose_connect)] as vel_pose_connect
    'inputs
    estimate_twist --> vel_pose_connect
    ndt_pose --> vel_pose_connect
    'outputs
    vel_pose_connect --> current_pose
    vel_pose_connect --> current_velocity

    '[dead_reckoner] @ Autoware v2.0
}

() "autoware_msgs::lane\n/final_waypoints" as final_waypoints
() "geometry_msgs::TwistStamped\n/twist_cmd" as twist_cmd
() "autoware_msgs::ControlCommandStamped\n/ctrl_cmd" as ctrl_cmd

folder motion {
    [waypoint_follower]
    'inputs
    current_pose --> waypoint_follower
    current_velocity --> waypoint_follower
    final_waypoints --> waypoint_follower
    'outputs
    waypoint_follower --> twist_cmd
    waypoint_follower --> ctrl_cmd
}

@enduml
