@startuml

title Autoware Component Dependencies (v2.0)

() "sensor_msgs::Image\n/image_raw" as image_raw
() "sensor_msgs::PointCloud2\n/points_raw" as points_raw
() "sensor_msgs::Imu\n/imu_raw" as imu_raw 
() "nmea_msgs::Sentence\n/nmea_sentence" as nmea_sentence

folder sensing {
    [camera]
    'outputs
    camera --> image_raw

    [lidar]
    'outputs
    lidar --> points_raw

    [imu]
    'outputs
    imu --> imu_raw

    [gnss]
    'outputs
    gnss --> nmea_sentence
}

() "autoware_motion_msgs::Motion\n/actuation/vehicle_status" as vehicle_status

'() "autoware_perception_msgs::TrafficLight\n/detection/traffic_light_color" as traffic_light_color
() "autoware_perception_msgs::DynamicObjectArray\n/detection/objects" as objects_fused

folder detection {
    () "autoware_perception_msgs::DynamicObjectArray\n/detection/vision_detector/objects" as detected_objects_vision
    () "autoware_perception_msgs::DynamicObjectArray\n/detection/lidar_detector/objects" as detected_objects_lidar
    () "autoware_perception_msgs::DynamicObjectArray\n/detection/fusion_detector/objects" as detected_objects_fused
    () "autoware_perception_msgs::DynamicObjectArray\n/detection/shape_estimator/objects" as shape_estimated_objects


    [vision_detector]
    'inputs
    image_raw --> vision_detector
    'outputs
    vision_detector --> detected_objects_vision

    [lidar_detector]
    'inputs
    points_raw --> lidar_detector
    'outputs
    lidar_detector --> detected_objects_lidar

    [fusion_detector]
    'inputs
    image_raw --> fusion_detector
    points_raw --> fusion_detector
    detected_objects_vision --> fusion_detector
    detected_objects_lidar --> fusion_detector
    'outputs
    fusion_detector --> detected_objects_fused

    [shape_estimator]
    'inputs
    detected_objects_fused --> shape_estimator
    'outputs
    shape_estimator --> shape_estimated_objects

    'connection
    shape_estimated_objects --> objects_fused

    '[trafficlight_recognizer]
    'inputs
    'image_raw --> trafficlight_recognizer
    'outputs
    'trafficlight_recognizer --> traffic_light_color
}

() "autoware_perception_msgs::DynamicObjectArray\n/tracking/objects" as objects_tracked


folder tracking {
    [object_tracker]
    'inputs
    objects_fused --> object_tracker
    'outputs
    object_tracker --> objects_tracked
}

() "autoware_perception_msgs::DynamicObjectArray\n/prediction/objects" as objects_predicted

folder prediction {
    [object_predictor]
    'inputs
    objects_tracked --> object_predictor
    'outputs
    object_predictor --> objects_predicted
}

'lidar_localizer
() "sensor_msgs::PointCloud2\n/points_map" as points_map

'vel_pose_connect
() "geometry_msgs::PoseStamped\n/localization/pose" as current_pose
() "geometry_msgs::TwistStamped\n/localization/velocity" as current_velocity

folder localization {
    frame "world frame" {
        () "geometry_msgs::PoseStamped\n/localization/gnss_localizer/pose" as gnss_pose
        () "geometry_msgs::PoseStamped\n/localization/lidar_localizer/pose" as ndt_pose
        () "geometry_msgs::PoseStamped\n/localization/vision_localizer/pose" as vision_pose
    }
    frame "base_link frame" {
        () "geometry_msgs::TwistStamped\n/localization/twist_estimator/can_twist" as can_twist
        () "geometry_msgs::TwistStamped\n/localization/twist_estimator/imu_twist" as imu_twist
    }
    folder pose_estimator {
        'inputs
        current_pose --> pose_estimator
        current_velocity --> pose_estimator

        [gnss_localizer]
        'inputs
        nmea_sentence --> gnss_localizer
        'outputs
        gnss_localizer --> gnss_pose

        [vision_localizer]
        'inputs
        image_raw --> vision_localizer
        'outputs
        vision_localizer --> vision_pose

        [lidar_localizer]
        'inputs
        points_raw --> lidar_localizer
        points_map --> lidar_localizer
        'outputs
        lidar_localizer --> ndt_pose
    }
    note right of pose_estimator
        - One of pose_estimators is mandatory
        - /localization/{pose,velocity} is only for initial guess
    end note

    [twist_estimator]
    note right of twist_estimator
        One of the inputs is mandatory
    end note
    'inputs
    vehicle_status --> twist_estimator
    imu_raw --> twist_estimator
    current_pose --> twist_estimator
    'outputs
    twist_estimator --> can_twist
    twist_estimator --> imu_twist

    [fusion_localizer]
    note right of fusion_localizer
        shall output pose and velocity in 100Hz
    end note
    'inputs
    gnss_pose --> fusion_localizer
    ndt_pose --> fusion_localizer
    vision_pose --> fusion_localizer
    can_twist --> fusion_localizer
    imu_twist --> fusion_localizer
    'outputs
    fusion_localizer --> current_pose
    fusion_localizer --> current_velocity
}

'() "autoware_msgs::ControlCommandStamped\n/ctrl_cmd" as ctrl_cmd

'folder mission {
'}

() "autoware_motion_msgs::VehicleCmd\n/motion/vehicle_cmd" as twist

folder motion {
    () "autoware_planning_msgs::Lane\n/motion/planner/waypoints" as final_waypoints
    () "geometry_msgs::TwistStamped\n/motion/waypoint_follower/twist" as twist_cmd
    () "geometry_msgs::TwistStamped\n/motion/motion_filter/twist" as twist_filtered
    () "autoware_motion_msgs::VehicleCmd\n/motion/{type}/vehicle_cmd" as vehicle_cmd
    () "autoware_motion_msgs::Pedal\n/motion/phisical_controller/pedal" as pedal

    [velocity_planner and trajectory_planner] as motion_planner
    'inputs
    objects_predicted --> motion_planner
    current_pose --> motion_planner
    current_velocity --> motion_planner
    'outputs
    motion_planner --> final_waypoints

    [waypoint_follower]
    'inputs
    final_waypoints --> waypoint_follower
    'outputs
    waypoint_follower --> twist_cmd
    'waypoint_follower --> ctrl_cmd

    [motion_filter]
    'inputs
    twist_cmd --> motion_filter
    'outputs
    motion_filter --> twist_filtered

    [phisical_controller]
    'inputs
    twist_filtered --> phisical_controller
    'outputs
    phisical_controller --> pedal

    [motion_interface]
    'outputs
    motion_interface --> vehicle_cmd

    [motion_gateway]
    'inputs
    vehicle_cmd --> motion_gateway
    twist_filtered --> motion_gateway
    pedal --> motion_gateway
    'outputs
    motion_gateway --> twist
}

() "CAN, Socket, Serial, etc" as vehicle_communication
() "autoware_actuation_msgs::VehicleStatus\n/actuation/vehicle_status" as vehicle_status

folder actuation {
    [vehicle_interface]
    'inputs
    twist --> vehicle_interface
    'outputs
    vehicle_interface --> vehicle_status
    vehicle_interface --> vehicle_communication
}

folder vehicle {
    [low_level_controller and vehicle] as low_level_controller
    'inputs
    vehicle_communication --> low_level_controller
}

@enduml
